import numpy as np
from abc import abstractmethod
from time import time
from os.path import expanduser

from nwlattice.printer import ABCPrinter
from nwlattice.utilities import ROOT3


class APointPlane(ABCPrinter):
    """Abstract base class for planes of points stacked by AStackLattice"""
    PRINT = False

    # translation vectors for planar lattices
    hex_vectors = np.array([[1., 0., 0.], [-.5, ROOT3 / 2., 0.]])
    sq_vectors = np.array([[1., 0., 0.], [0., 1., 0.]])

    # centering offset vectors for planar lattices
    ohex_delta = .5 * np.array([1., 1. / ROOT3, 0.])
    ehex_delta = .25 * np.array([1, -1. / ROOT3, 0.])

    @abstractmethod
    def get_points(self, center=True):
        """return an array of all atom points"""
        raise NotImplementedError

    @staticmethod
    @abstractmethod
    def index_for_diameter(scale, D):
        """return plane index for given diameter"""
        raise NotImplementedError

    @property
    @abstractmethod
    def N(self):
        # implement N formula for each subclass
        return self._N

    @property
    @abstractmethod
    def D(self):
        # implement diameter formula for each subclass
        raise NotImplementedError

    @property
    @abstractmethod
    def area(self):
        # implement area formula for each subclass
        raise NotImplementedError

    @property
    @abstractmethod
    def vectors(self):
        # set translation vectors for each subclass
        raise NotImplementedError

    @property
    @abstractmethod
    def com(self):
        # implement com formula for each subclass
        raise NotImplementedError

    def __init__(self, scale):
        super().__init__()
        self._N = None  # number of lattice points
        self._D = None  # diameter
        self._vectors = None  # translation vectors
        self._area = None  # cross sectional area
        self._com = None  # points centre of mass
        self._scale = scale  # scaling factor
        self._points = None  # array of points in this PointPlane

    @property
    def scale(self):
        # global scaling of all point in plane
        return self._scale

    def write_points(self, file_path: str):
        """
        Write LAMMPS/OVITO compatible data file of all atom points

        :param file_path: string indicating target file (created/overwritten)
        :return: None
        """
        N_atoms = self.N  # total number of atoms

        t1 = time()
        file_path = expanduser(file_path)
        with open(file_path, "w") as file_:
            # header (ignored)
            file_.write("atom coordinates generated by 'nwlattice' package\n")
            file_.write("\n")

            # number of atoms and number of atom types
            file_.write("%d atoms\n" % N_atoms)
            file_.write("1 atom types\n")
            file_.write("\n")

            # Atoms section
            file_.write("Atoms # atomic\n")
            file_.write("\n")
            id_ = 1
            for pt in self.get_points(center=True):
                pt *= self._scale
                file_.write("{} {} {} {} {} 0 0 0\n"
                            .format(id_, 1, pt[0], pt[1], pt[2]))
                id_ += 1
            t2 = time()
            self.print("wrote %d atoms to map file '%s' in %f seconds"
                       % (N_atoms, file_path, t2 - t1))
